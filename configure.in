AC_INIT([fmios-kernel], [0.1.1])
AC_CONFIG_AUX_DIR([.])
AC_PREFIX_DEFAULT([])

AC_CANONICAL_HOST

# Shutdown some of the normal compiler assumptions
CFLAGS="-nostdinc -ffreestanding"
LDFLAGS="-nostdlib"
AC_SUBST([CFLAGS])
AC_SUBST([LDFLAGS])

# Locate our toolchain
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_RANLIB

AC_LANG_C

AC_ARG_ENABLE([multiboot1],
	[AS_HELP_STRING([--enable-multiboot1],
	       [Support legacy Multiboot1 bootloaders @<:@default=disabled@:>@])],
	[],
	[enable_multiboot1=disabled])
AS_IF([test "x$enable_multiboot1" != xdisabled],
	[AC_DEFINE([CONFIG_ENABLE_MULTIBOOT1], [1],
		[Define to enable legacy Multiboot support])])

# Newlib's attempt to set up a "sane default" compiler results in bipassing
# autoconf's detection of the compiler during in some cross-compilation
# environments.
CC_FOR_BUILD="${CC}"
AC_SUBST([CC_FOR_BUILD])
export CC_FOR_BUILD
export CC

# Our handling of the fmios_arch directory
case "$host_cpu" in
(i*86)	ARCH=x86;;
(*)	ARCH=$host_cpu;;
esac
AC_SUBST([ARCH])

AC_CONFIG_HEADER([include/fmios/config.h])
AC_CONFIG_SUBDIRS([newlib])
AC_CONFIG_FILES([Makefile])
AC_OUTPUT
